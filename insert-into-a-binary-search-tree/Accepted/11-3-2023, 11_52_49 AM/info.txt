{"id":1090412380,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1698992569,"status":10,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/1090412380/","is_pending":"Not Pending","title":"Insert into a Binary Search Tree","memory":"57.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    void helper(TreeNode* root, int val){\n        if(root == NULL){\n\n            return;\n        }\n\n        if(root->val > val){\n            if(root->left == NULL){\n                TreeNode* node = new TreeNode(val);\n                root->left = node;\n                return;\n            }\n            helper(root->left, val);\n            return;\n        }\n        if(root->val  < val){\n            if(root->right == NULL){\n                TreeNode* node = new TreeNode(val);\n                root->right = node;\n                return;\n            }\n            helper(root->right, val);\n            return;\n        }\n    }\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        if(root == NULL){\n            TreeNode* node = new TreeNode(val);\n            return node;\n        }\n        auto temp = root;\n\n        helper(temp, val);\n\n        return root;\n\n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111111","title_slug":"insert-into-a-binary-search-tree","has_notes":false,"flag_type":1}