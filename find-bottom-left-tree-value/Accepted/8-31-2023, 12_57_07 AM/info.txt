{"id":1036254306,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1693423627,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1036254306/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"21.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void helper(TreeNode* root, int count, vector<pair<int,int>> &v){\n        if(root == NULL){\n            return;\n        }\n        if(root->right == NULL && root->left == NULL){\n            auto p = make_pair(count, root->val);\n            v.push_back(p);\n            return;\n        }\n        helper(root->left, count + 1, v);\n        helper(root->right, count + 1, v);\n       \n        \n\n    }\n    int findBottomLeftValue(TreeNode* root) {\n\n        vector<pair<int,int>> v;\n        int count = 0;\n        helper(root, count, v);\n        int max = INT_MIN;\n        int pos = -1;\n        for(const auto& p : v){\n            if(p.first > max){\n                max = p.first;\n                pos = p.second;\n            }\n        }\n        return pos;\n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-bottom-left-tree-value","has_notes":false,"flag_type":1}