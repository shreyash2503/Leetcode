{"id":1036277586,"lang":"dart","lang_name":"Dart","time":"4Â months","timestamp":1693425701,"status":10,"status_display":"Accepted","runtime":"247 ms","url":"/submissions/detail/1036277586/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"144.1 MB","code":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\n\nclass Pair<E, V>{\n    E first;\n    V second;\n\n    Pair(this.first, this.second);\n    \n}\nclass Solution {\n\n  void helper(TreeNode? root, int count, List<Pair<int, int>> l){\n      if(root == null){\n          return;\n      }\n      if(root.left == null && root.right == null){\n          Pair<int, int> p = Pair<int, int>(count, root.val);\n          l.add(p);\n          return;\n      }\n      helper(root.left, count + 1, l);\n      helper(root.right, count + 1, l);\n\n  }\n  int findBottomLeftValue(TreeNode? root) {\n      int count = 0;\n      List<Pair<int,int>> l = [];\n      helper(root, count, l);\n      int max = -1;\n      int pos = -1;\n      for(int i=0;i<l.length;i++){\n          print(l[i].first);\n          print(l[i].second);\n          if(l[i].first > max){\n              max = l[i].first;\n              pos = l[i].second;\n          }\n      }\n\n    return pos;\n  }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-bottom-left-tree-value","has_notes":false,"flag_type":1}