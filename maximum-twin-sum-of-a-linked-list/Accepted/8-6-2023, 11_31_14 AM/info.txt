{"id":1013572674,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1691301674,"status":10,"status_display":"Accepted","runtime":"175 ms","url":"/submissions/detail/1013572674/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"116.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n \n    pair<ListNode*, ListNode*> findMiddle(ListNode* head){\n        ListNode* temp = head;\n        pair<ListNode*, ListNode*> p;\n        ListNode* slow = head;\n        ListNode* fast = head->next;\n\n        while(fast->next != NULL){\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n        p.first = slow;\n        p.second = slow->next;\n        return p;\n    }\n    int pairSum(ListNode* head) {\n        pair<ListNode*, ListNode*> p;\n        p = findMiddle(head);\n        p.first->next = NULL;\n        ListNode* curr = p.second;\n        ListNode* prev = NULL;\n        while(curr != NULL){\n            ListNode* temp = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = temp;\n        }\n        int max  = INT_MIN;\n        while(head != NULL && prev != NULL){\n            if(head->val + prev->val > max){\n                max = head->val + prev->val;\n            }\n            head = head->next;\n            prev = prev->next;\n        \n        }\n        return max;\n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1}