{"id":997768420,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1689700593,"status":10,"status_display":"Accepted","runtime":"521 ms","url":"/submissions/detail/997768420/","is_pending":"Not Pending","title":"LRU Cache","memory":"178.7 MB","code":"\nclass LRUCache {\npublic:\n    class Node{\n        public: \n            int key;\n            int val;\n            Node* prev;\n            Node* next;\n\n            Node(int key, int val){\n                this->key = key;\n                this->val = val;\n            }\n    };\n\n    Node* head = new Node(-1, -1);\n    Node* tail = new Node(-1, -1);\n\n    int cap;\n    unordered_map<int, Node*> m;\n\n    LRUCache(int capacity) {\n        cap = capacity;\n        head -> next = tail;\n        tail -> prev = head;\n    }\n\n    void addNode(Node* newnode){\n        Node* temp = head -> next;\n\n        newnode -> next = temp;\n        newnode -> prev = head;\n\n        head -> next = newnode;\n        temp -> prev = newnode;\n    }\n\n    void deleteNode(Node* delnode){\n        Node* prevv = delnode -> prev;\n        Node* nextt = delnode -> next;\n\n        prevv -> next = nextt;\n        nextt -> prev = prevv;\n    }\n    \n    int get(int key) {\n        if(m.find(key) != m.end()){\n            Node* resNode = m[key];\n            int ans = resNode -> val;\n\n            m.erase(key);\n            deleteNode(resNode);\n            addNode(resNode);\n\n            m[key] = head -> next;\n            return ans;\n        }\n        return -1;\n    }\n    \n    void put(int key, int value) {\n        if(m.find(key) != m.end()){\n            Node* curr = m[key];\n            m.erase(key);\n            deleteNode(curr);\n        }\n\n        if(m.size() == cap){\n            m.erase(tail -> prev -> key);\n            deleteNode(tail -> prev);\n        }\n\n        addNode(new Node(key, value));\n        m[key] = head -> next;\n    }\n};\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}