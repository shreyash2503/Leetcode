{"id":1096746023,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1699727069,"status":10,"status_display":"Accepted","runtime":"344 ms","url":"/submissions/detail/1096746023/","is_pending":"Not Pending","title":"Design Graph With Shortest Path Calculator","memory":"112.8 MB","code":"class Graph {\npublic:\n    vector<vector<pair<int, int>>> adjList;\n    Graph(int n, vector<vector<int>>& edges) {\n        adjList.resize(n);\n        for (auto& e: edges)\n            adjList[e[0]].push_back(make_pair(e[1], e[2]));\n    }\n\n    void addEdge(vector<int> edge) {\n        adjList[edge[0]].push_back(make_pair(edge[1], edge[2]));\n    }\n\n    int shortestPath(int node1, int node2) {\n        int n = adjList.size();\n        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;\n        vector<int> costForNode(n, INT_MAX);\n        costForNode[node1] = 0;\n        pq.push({0, node1});\n\n        while (!pq.empty()) {\n            int currCost = pq.top()[0];\n            int currNode = pq.top()[1];\n            pq.pop();\n\n            if (currCost > costForNode[currNode]) {\n                continue;\n            }\n            if (currNode == node2) {\n                return currCost;\n            }\n            for (auto& neighbor : adjList[currNode]) {\n                int neighborNode = neighbor.first;\n                int cost = neighbor.second;\n                int newCost = currCost + cost;\n\n                if (newCost < costForNode[neighborNode]) {\n                    costForNode[neighborNode] = newCost;\n                    pq.push({newCost, neighborNode});\n                }\n            }\n        }\n        return -1;\n    }\n};\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph* obj = new Graph(n, edges);\n * obj->addEdge(edge);\n * int param_2 = obj->shortestPath(node1,node2);\n */","compare_result":"111111111111111111111111111111111111","title_slug":"design-graph-with-shortest-path-calculator","has_notes":false,"flag_type":1}