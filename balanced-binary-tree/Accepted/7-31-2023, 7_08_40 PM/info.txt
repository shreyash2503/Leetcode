{"id":1008516987,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1690810720,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1008516987/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"20.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int height(TreeNode* root){\n        if(root == NULL){\n            return 0;\n        }\n        int left = 1 + height(root->left);\n        int right = 1 + height(root->right);\n        return max(left, right);\n    }\n    bool helper(TreeNode* root){\n        if(root == NULL){\n            return true;\n        }\n        int left = height(root->left);\n        int right = height(root->right);\n        if(abs(left - right) > 1){\n            return false;\n        }\n        if(helper(root->left) && helper(root->right)){\n            return true;\n        }\n        return false;\n    }\n    bool isBalanced(TreeNode* root) {\n        return helper(root);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}