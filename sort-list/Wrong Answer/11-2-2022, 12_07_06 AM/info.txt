{"id":834864253,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1667327826,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/834864253/","is_pending":"Not Pending","title":"Sort List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeLists(ListNode* a, ListNode* b){\n        if(a == NULL) return b;\n        if(b == NULL) return a;\n        ListNode* newHead = NULL;\n        if(a->val > b->val)\n        {\n            newHead = b;\n            newHead->next = mergeLists(a, b->next);\n        }\n        if(a->val < b->val)\n        {\n            newHead = a;\n            newHead->next = mergeLists(a->next, b);\n        }\n        return newHead;\n\n        }\n    ListNode* sortList(ListNode* head) {\n        if(head == NULL) return NULL;\n        if(head->next == NULL ) return head;;\n        ListNode* slow = head; \n        ListNode* fast = head->next;\n         while(fast && fast->next)\n         {\n             slow = slow->next;\n             fast = fast->next->next;\n         }  \n         ListNode* n = slow->next;\n         slow->next = NULL;\n        ListNode* a = sortList(head);\n        ListNode* b = sortList(n);\n        ListNode* newHead = mergeLists(a, b);\n        return newHead;\n        \n    }\n};","compare_result":"111111111101111111111000001011","title_slug":"sort-list","has_notes":false,"flag_type":1}