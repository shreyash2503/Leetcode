{"id":831274771,"lang":"cpp","lang_name":"C++","time":"1 year, 2 months","timestamp":1666857963,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/831274771/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"26.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTreeHelper(vector<int>& inorder, vector<int>& postorder,int inS, int inE, int poS, int poE)\n    {\n        if(inS > inE)\n        {\n            return NULL;\n        }\n        int rootData = postorder[poE];\n        TreeNode* temp = new TreeNode(rootData);\n        int rootIndex = 0;\n        for(int i=inS;i<=inE;i++)\n        {\n            if(inorder[i] == rootData)\n            {\n                rootIndex = i;\n                break;\n            }\n        }\n        int lInS = inS;\n        int lInE = rootIndex - 1;\n        int lPoS = poS;\n        int lPoE = lInE - lInS + lPoS;\n        int rInS= rootIndex + 1;\n        int rInE = inE;\n        int rPoS = lPoE + 1;\n        int rPoE = poE - 1 ;\n        temp->left = buildTreeHelper(inorder, postorder, lInS, lInE, lPoS, lPoE);\n        temp->right = buildTreeHelper(inorder, postorder, rInS, rInE, rPoS, rPoE);\n        return temp;\n    }\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        int size = inorder.size();\n        return buildTreeHelper(inorder, postorder, 0, size-1, 0, size-1);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}