{"id":1113616664,"lang":"cpp","lang_name":"C++","time":"3 weeks, 3 days","timestamp":1701867824,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1113616664/","is_pending":"Not Pending","title":"All Ancestors of a Node in a Directed Acyclic Graph","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> bfs(int vertex, unordered_map<int, vector<int>> map, int n){\n        queue<int> q;\n        q.push(vertex);\n        vector<int> ans;\n        vector<int> visited(n, -1);\n        while(!q.empty()){\n            auto front = q.front(); q.pop();\n            for(auto temp : map[front]){\n                if(visited[temp] == -1){\n                    visited[temp] = 0;\n                    q.push(temp);\n                    ans.push_back(temp);\n                }\n            }\n\n        }\n\n        return ans;\n    }\n    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {\n\n        vector<vector<int>> ans(n);\n\n        vector<vector<int>> _ans(n);\n        unordered_map<int, vector<int>> map;\n\n        for(auto v : edges){\n            map[v[0]].push_back(v[1]);\n        }\n\n        for(int i=0;i<n;i++){\n            vector<int> temp = bfs(i, map, n);\n            ans[i] = temp;\n\n        }\n        for(auto v : ans){\n            for(auto i : v){\n                cout << i << \" \";\n            }\n            cout << endl;\n        }\n\n\n\n        cout << \"ans size is ::\" << ans.size() << endl;\n       for(int i=0;i<ans.size();i++){\n           for(auto j : ans[i]){\n               _ans[j].push_back(i);\n           }\n       }\n\n    \n        return _ans;\n\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111000","title_slug":"all-ancestors-of-a-node-in-a-directed-acyclic-graph","has_notes":false,"flag_type":1}