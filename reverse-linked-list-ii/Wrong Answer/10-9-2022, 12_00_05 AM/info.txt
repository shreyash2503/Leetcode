{"id":818057550,"lang":"cpp","lang_name":"C++","time":"1Â year, 2Â months","timestamp":1665253805,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/818057550/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int left, int right) {\n        if(left == right)\n        {\n            return head;\n        }\n        int count = 1;\n        ListNode* lef;\n        ListNode* righ;\n        ListNode* temp = head;\n\n        if(left == right-1)\n        {\n            ListNode* prev = NULL;\n            while(temp != NULL)\n            {\n                if(count == left)\n                {\n                    lef = temp;\n                    break;\n                }\n                prev = temp;\n                temp = temp->next;\n                count++;\n            }\n            if(lef->next->next == NULL)\n            {\n                lef->next->next = temp;\n                temp->next = NULL;\n                return temp;\n            }\n            else\n            {\n            if(lef && lef->next)\n            {\n                ListNode *next = lef->next;       //Right Node;\n                ListNode* next2 = lef->next->next;\n                prev->next = next;\n                next->next = lef;\n                lef->next = next2;\n            }\n            return head;\n            }\n\n            \n        }\n\n        else if(left == 1)\n        {\n            lef = temp;\n            while(temp != NULL)\n            {\n                if(count == right-1)\n                {\n                    righ = temp;\n                    break;\n                }\n                temp = temp->next;\n                count++;\n                \n            }\n                ListNode* n2 = righ->next;\n                ListNode* next1 = lef->next;\n                ListNode* next2 = righ->next->next;\n                n2->next = next1;\n                righ->next = lef;\n                lef->next = next2;\n                return head;\n        }\n        else\n        {\n        while(temp != NULL)\n        {\n            if(count == left-1)\n            {\n                lef = temp;\n            }\n            if(count == right-1)\n            {\n                righ = temp;\n                break;\n            }\n            temp = temp->next;\n            count++;\n        }\n        ListNode* n1 = lef->next;\n        ListNode* n2 = righ->next;\n        ListNode* next1 = lef->next->next;\n        ListNode* next2 = righ->next->next;\n        lef->next = n2;\n        righ->next = n1;\n        n2->next = next1;\n        n1->next = next2;\n        return head;\n\n        }\n        return head;\n       \n        \n    }\n};","compare_result":"11110111000000000000000000000000000000000000","title_slug":"reverse-linked-list-ii","has_notes":false,"flag_type":1}