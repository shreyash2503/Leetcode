{"id":818034543,"lang":"cpp","lang_name":"C++","time":"1Â year, 2Â months","timestamp":1665251775,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/818034543/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int left, int right) {\n        if(left == right)\n        {\n            return head;\n        }\n        int count = 1;\n        ListNode* lef;\n        ListNode* righ;\n        ListNode* temp = head;\n        while(temp != NULL)\n        {\n            if(count == left-1)\n            {\n                lef = temp;\n            }\n            if(count == right-1)\n            {\n                righ = temp;\n                break;\n            }\n            temp = temp->next;\n            count++;\n        }\n        if(lef && righ)\n        {\n        ListNode* n1 = lef->next;\n        ListNode* n2 = righ->next;\n        ListNode* next1 = lef->next->next;\n        ListNode* next2 = righ->next->next;\n        lef->next = n2;\n        righ->next = n1;\n        n2->next = next1;\n        n1->next = next2;\n        return head;\n        }\n        return head;\n        \n    }\n};","compare_result":"11110000000000000000000000000000000000000000","title_slug":"reverse-linked-list-ii","has_notes":false,"flag_type":1}