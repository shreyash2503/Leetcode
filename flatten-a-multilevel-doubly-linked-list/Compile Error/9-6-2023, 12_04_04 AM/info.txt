{"id":1041493009,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1693938844,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1041493009/","is_pending":"Not Pending","title":"Flatten a Multilevel Doubly Linked List","memory":"N/A","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* prev;\n    Node* next;\n    Node* child;\n};\n*/\n\nclass Solution {\npublic:\n    Node* recursive(Node* head){\n        if(head == NULL){\n            return NULL;\n        }\n        Node* temp = head;\n        while(temp != NULL){\n            if(temp->child){\n                Node* _temp = temp->next;\n                Node* _next = recursive(temp->child);\n                temp->next = _next;\n                _next->prev = temp;\n\n                temp->child = NULL;\n\n                Node* prev = NULL;\n                Node* flag = temp->next;\n                while(flag != NULL){\n                    prev = flag;\n                    flag = flag->next;\n                }\n                prev->next = _temp;\n                temp = _temp;\n                if(_temp){\n                _   temp->prev = prev;\n                }\n                continue;\n            }\n            temp = temp->next;\n\n        }\n        return head;\n    }\n    Node* flatten(Node* head) {\n        return recursive(head);\n\n\n        \n    }\n};","compare_result":null,"title_slug":"flatten-a-multilevel-doubly-linked-list","has_notes":false,"flag_type":1}