{"id":1100863538,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1700235437,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/1100863538/","is_pending":"Not Pending","title":"Find the City With the Smallest Number of Neighbors at a Threshold Distance","memory":"38 MB","code":"class Solution {\npublic:\n    int helper(unordered_map<int, vector<pair<int, int>>> map, int n, int sv, int threshold){\n        vector<int> weights(n, INT_MAX);\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        pq.push({0, sv});\n\n        weights[sv] = 0;\n        vector<int> visited(n, 0);\n        while(!pq.empty()){\n            auto front = pq.top(); pq.pop();\n            auto node = front.second;\n            auto weight = front.first;\n            if(visited[node] == 0){\n\n                for(auto neighbour : map[node]){\n                    auto acq = neighbour.first;\n                    auto cost = neighbour.second;\n                    auto currCost = cost + weight;\n                    if(currCost < weights[acq] && currCost <= threshold) {\n                        weights[acq] = currCost;\n                        pq.push({currCost, acq});\n                    }\n                }\n                visited[node] = 1;\n            }\n\n        }\n        int sum = 0;\n        cout << sv << endl;\n        // for(auto i : weights){\n        //     cout << i << \" \";\n        //     if(i != INT_MAX && i != sv) {\n        //         sum++;\n        //     }\n\n        // }\n        for(int i=0;i<weights.size();i++){\n            cout << weights[i] << \" \"; \n            if(weights[i] != INT_MAX && i != sv){\n                sum++;\n            }\n        }\n        cout << endl;\n        return sum;\n    }\n\n    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n\n        unordered_map<int, vector<pair<int, int>>> map;\n        for(auto edge : edges){\n            map[edge[0]].push_back(make_pair(edge[1], edge[2]));\n            map[edge[1]].push_back(make_pair(edge[0], edge[2]));\n        }\n\n        int node;\n        int sum = INT_MAX;\n        for(int i=0;i<n;i++){\n            int ans = helper(map, n, i, distanceThreshold);\n            cout << ans;\n            if(ans < sum){\n                node = i;\n                sum = ans;\n                continue;\n            }\n            \n            if(ans == sum && i > node){\n                node = i;\n                sum = ans;\n\n            }\n        }\n\n        cout << node;\n        return node;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance","has_notes":false,"flag_type":1}