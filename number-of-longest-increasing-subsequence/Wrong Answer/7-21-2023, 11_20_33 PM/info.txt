{"id":1000366595,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1689961833,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1000366595/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\npublic:\n    int findNumberOfLIS(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> dp(n, 1);\n        vector<int> counts(n, 1);\n        int maxLength = 1;\n        for(int i=0;i<n;i++){\n            for(int j=0;j<n;j++){\n                if(nums[i] > nums[j]){\n                    if(dp[j] + 1 > dp[i]){\n                        dp[i] = dp[j] + 1;\n                        counts[i] = counts[j];\n                    } else if(dp[j] + 1 == dp[i]){\n                        counts[i] = counts[j] + 1;\n                    }\n                }\n            }\n            maxLength = max(maxLength, dp[i]);\n        }\n\n        int result = 0;\n        for(int i=0;i<n;i++){\n            if(dp[i] == maxLength){\n                result += counts[i];\n            }\n        }\n        \n        return result;\n    }\n};","compare_result":"1101110111010110110010101110100010010101001100000000000000000000101000011011110110111111011001000000000000000000000000000000010010000000000000000000000001000000000010011001000000101000000000000000000000000001001001100000101","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}