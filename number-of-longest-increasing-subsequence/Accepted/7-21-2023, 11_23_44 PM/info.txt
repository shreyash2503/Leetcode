{"id":1000368938,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1689962024,"status":10,"status_display":"Accepted","runtime":"207 ms","url":"/submissions/detail/1000368938/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"13.2 MB","code":"class Solution {\npublic:\n    int findNumberOfLIS(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> dp(n, 1); \n        vector<int> count(n, 1); \n        int maxLen = 1, ans = 0;\n        \n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums[i] > nums[j]) {\n                    if (dp[j] + 1 > dp[i]) {\n                        dp[i] = dp[j] + 1;\n                        count[i] = count[j];\n                    }\n                    else if (dp[j] + 1 == dp[i]) \n                        count[i] += count[j];\n                }\n            }\n            maxLen = max(maxLen, dp[i]);\n        }\n        \n        for (int i = 0; i < n; i++) \n            if (dp[i] == maxLen) \n                ans += count[i];\n        \n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}