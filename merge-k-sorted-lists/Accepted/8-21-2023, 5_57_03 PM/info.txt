{"id":1027595844,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1692620823,"status":10,"status_display":"Accepted","runtime":"166 ms","url":"/submissions/detail/1027595844/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"13.5 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* merge(ListNode* a, ListNode* b){\n        if(a == NULL) return b;\n        if(b == NULL) return a;\n        ListNode* newHead = NULL;\n        if(a->val > b->val){\n            newHead = b;\n            b->next = merge(a, b->next);\n\n        } else {\n            newHead = a;\n            newHead->next = merge(a->next, b);\n        }\n        return newHead;\n    }\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        if(lists.size() == 0){\n            return NULL;\n        }\n        if(lists.size() == 1 && lists[0] == NULL){\n            return NULL;\n        }\n        ListNode* prev = lists[0];\n\n        for(int i=1;i<lists.size();i++){\n            prev = merge(prev, lists[i]);\n        }\n\n        return prev;\n      \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}