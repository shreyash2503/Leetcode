{"id":831169853,"lang":"cpp","lang_name":"C++","time":"1 year, 2 months","timestamp":1666844939,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/831169853/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"25.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTreeHelper(vector<int>& preorder, vector<int>& inorder, int inS, int inE, int prS, int prE)\n    {\n        if(inS > inE)\n        {\n            return NULL;\n        }\n        int root = preorder[prS];\n        int rootIndex = -1;\n        TreeNode* temp = new TreeNode(root);\n        for(int i=inS;i<=inE;i++)\n        {\n            if(inorder[i] == root)\n            {\n                rootIndex = i;\n                break;\n            }\n        }\n        int lInS = inS;\n        int lInE = rootIndex - 1;\n        int lPrS = prS + 1;\n        int lPrE = lInE - lInS + lPrS;\n        int rInS = rootIndex + 1;\n        int rInE = inE;\n        int rPrS = lPrE + 1;\n        int rPrE = prE;\n        temp->left = buildTreeHelper(preorder, inorder, lInS, lInE, lPrS, lPrE);\n        temp->right = buildTreeHelper(preorder, inorder, rInS, rInE, rPrS, rPrE);\n        return temp;\n    }\n\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        int size = preorder.size();\n        return buildTreeHelper(preorder, inorder,0,size-1,0,size-1);\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}