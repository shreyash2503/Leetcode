{"id":818014480,"lang":"cpp","lang_name":"C++","time":"1 year, 2 months","timestamp":1665250008,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/818014480/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"7.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n       ListNode* fast = head, *slow = head, *ptr = head;\n       if(head == NULL || head->next == NULL)\n       {\n           return NULL;\n       }\n       while(fast && fast->next)\n       {\n           slow = slow->next;\n           fast = fast->next->next;\n           if(slow == fast)\n           {\n               break;\n           }\n       }\n       if(slow != fast)\n       {\n           return NULL;\n       }\n        while(slow != ptr)\n        {\n            slow = slow->next;\n            ptr = ptr->next;\n        }\n        return slow;\n        \n        \n    }\n};","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}