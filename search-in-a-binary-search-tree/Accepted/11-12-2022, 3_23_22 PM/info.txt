{"id":841870024,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1668246802,"status":10,"status_display":"Accepted","runtime":"111 ms","url":"/submissions/detail/841870024/","is_pending":"Not Pending","title":"Search in a Binary Search Tree","memory":"34.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n        if(root == NULL) return NULL;\n        TreeNode* temp1 = NULL;\n        TreeNode* temp2 = NULL;\n        if(root->val > val)\n        {\n            temp1 = searchBST(root->left, val);\n        }\n        if(root->val < val)\n        {\n            temp2 = searchBST(root->right, val);\n\n        }\n        if(root->val == val)\n        {\n            return root;\n        }\n\n       return temp1 == NULL ? temp2 : temp1;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"search-in-a-binary-search-tree","has_notes":false,"flag_type":1}