{"id":936841387,"lang":"cpp","lang_name":"C++","time":"8 months, 2 weeks","timestamp":1681985528,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/936841387/","is_pending":"Not Pending","title":"Design Linked List","memory":"19.9 MB","code":"class Node{\npublic:\n    int val;\n    Node* next;\n    Node(int val){\n        this->val = val;\n        this->next = NULL;\n    }\n};\n\nclass MyLinkedList {\npublic:\n    Node* head;\n    int size;\n    MyLinkedList() {\n        this->head = NULL;\n        this->size = 0;\n    }\n\n    int get(int index) {\n        if (index < 0 || index >= size) { // check if index is out of bounds\n            return -1;\n        }\n        Node* current = this->head;\n        for (int i = 0; i < index; i++) {\n            current = current->next;\n        }\n\n        return current->val;\n    }\n\n    void addAtHead(int val) {\n        Node* newHead = new Node(val);\n        newHead->next = this->head; // set newHead's next to current head\n        this->head = newHead; // update head to newHead\n        this->size++;\n    }\n\n    void addAtTail(int val) {\n        if (this->head == NULL) { // if list is empty, add new node as head\n            addAtHead(val);\n            return;\n        }\n        Node* current = this->head;\n        while (current->next != NULL) {\n            current = current->next;\n        }\n        Node* newTail = new Node(val);\n        current->next = newTail;\n        this->size++;\n    }\n\n    void addAtIndex(int index, int val) {\n        if (index < 0 || index > size) {\n            return;\n        }\n        if (index == 0) { // if adding at head, use addAtHead method\n            addAtHead(val);\n            return;\n        }\n        Node* current = this->head;\n        for (int i = 0; i < index - 1; i++) {\n            current = current->next;\n        }\n        Node* newNode = new Node(val);\n        newNode->next = current->next;\n        current->next = newNode;\n        this->size++;\n    }\n\n    void deleteAtIndex(int index) {\n        if (index < 0 || index >= size) {\n            return;\n        }\n        if (index == 0) { // if deleting head, update head to next node\n            Node* temp = this->head;\n            this->head = this->head->next;\n            delete temp;\n            this->size--;\n            return;\n        }\n        Node* current = this->head;\n        for (int i = 0; i < index - 1; i++) {\n            current = current->next;\n        }\n        Node* temp = current->next;\n        current->next = temp->next;\n        delete temp;\n        this->size--;\n    }\n\n    ~MyLinkedList(){\n        Node* current = this->head;\n        while (current != NULL) {\n            Node* temp = current;\n            current = current->next;\n            delete temp;\n        }\n        this->head = NULL;\n        this->size = 0;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-linked-list","has_notes":false,"flag_type":1}