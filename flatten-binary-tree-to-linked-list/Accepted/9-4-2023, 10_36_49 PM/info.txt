{"id":1040495795,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1693847209,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1040495795/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"13.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void helper(TreeNode* root, vector<TreeNode*> &v){\n        if(root == NULL){\n            return;\n        }\n        v.push_back(root);\n        helper(root->left, v);\n        helper(root->right, v);\n    }\n\n    void flatten(TreeNode* root) {\n        if(root == NULL){\n            return;\n        }\n        vector<TreeNode*> v;\n        helper(root, v);\n        TreeNode* r = v[0];\n        for(int i=1;i<v.size();i++){\n            r->left = NULL;\n            r->right = NULL;\n            r->right = v[i];\n            r = r->right;\n        }\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false,"flag_type":1}