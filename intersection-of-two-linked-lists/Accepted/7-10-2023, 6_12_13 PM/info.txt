{"id":990961213,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1688992933,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/990961213/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"14.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if(headA == NULL || headB == NULL){\n            return NULL;\n        }\n        ListNode* temp1 = headA;\n        int count1 = 0;\n        while(temp1 != NULL){\n            temp1 = temp1->next;\n            count1++;\n\n        }\n\n        ListNode* temp2 = headB;\n        int count2 = 0;\n        while(temp2 != NULL){\n            temp2 = temp2->next;\n            count2 ++;\n        }\n        if(count1 > count2){\n            int skip = count1 - count2;\n            int tempCount = 0;\n            while(skip != tempCount){\n                headA = headA->next;\n                tempCount++;\n                \n            }\n            while(headA != headB){\n                    headA = headA->next;\n                    headB = headB->next;\n                }\n            return headA;\n        } else {\n            int skip = count2 - count1;\n            int tempCount = 0;\n            while(skip != tempCount){\n                headB = headB->next;\n                tempCount++;\n            }\n            while(headA != headB){\n                headA = headA->next;\n                headB = headB->next;\n            }\n            return headA;\n\n        }\n\n        return NULL;\n       \n       \n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"intersection-of-two-linked-lists","has_notes":false,"flag_type":1}