{"id":1012768788,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1691230450,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1012768788/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"12.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void helper(TreeNode* root, vector<int>& v){\n        if(root == NULL){\n            return;\n        }\n        if(root->left == NULL && root->right == NULL){\n            v.push_back(root->val);\n            return;\n        }\n        helper(root->left, v);\n        helper(root->right, v);\n    }\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        vector<int> v1;\n        vector<int> v2;\n        helper(root1, v1);\n        helper(root2, v2);\n        int flag = 0;\n        if(v1.size() != v2.size()) return false;\n       if(equal(v1.begin(), v1.end(), v2.begin())) flag = 1;\n        return flag == 1 ? true : false;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}