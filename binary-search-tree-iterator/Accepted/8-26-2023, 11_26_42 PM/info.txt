{"id":1032474089,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1693072602,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1032474089/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"24.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    vector<int> v;\n    int size;\n    int curr;\n    BSTIterator(TreeNode* root) {\n        this->inorder(root);\n        this->size = v.size();\n        this->curr = 0;\n        \n    }\n\n    void inorder(TreeNode* root){\n        if(root == NULL){\n            return;\n        }\n        inorder(root->left);\n        v.push_back(root->val);\n        inorder(root->right);\n    }\n    \n    int next() {\n        int data = -1;\n        if(curr < size){\n            data = v[curr];\n        }\n        curr ++ ;\n        return data;\n        \n    }\n    \n    bool hasNext() {\n        if(curr < size){\n            return true;\n        }\n        return false;\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}