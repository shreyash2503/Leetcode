{"id":1089717396,"lang":"cpp","lang_name":"C++","time":"1 month, 4 weeks","timestamp":1698909919,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/1089717396/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"42.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    TreeNode* helper(vector<int> & nums, int s, int e){\n        if(s >= e){\n            return NULL;\n        }\n        int max_index = max_element(nums.begin() + s, nums.begin() + e) - nums.begin();\n        cout << max_index << endl;\n        TreeNode* node = new TreeNode(nums[max_index]); \n        if(max_index - 1 >= 0){\n            node->left = helper(nums, s, max_index);\n        } else {\n            node->left = NULL;\n        }\n        if(max_index + 1 < e){\n            node->right = helper(nums, max_index + 1, e);\n        } else {\n            node->right = NULL;\n        }\n\n        return node;\n    }\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        return helper(nums, 0, nums.size());\n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree","has_notes":false,"flag_type":1}