{"id":993431932,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1689248137,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/993431932/","is_pending":"Not Pending","title":"Course Schedule","memory":"N/A","code":"class Solution {\npublic:\n    void createIndegree(vector<vector<int>> v, unordered_map<int, int>& map, int size){\n        for(int i=0;i<size;i++){\n            map[i] = v[i].size();\n        }\n    }\n\n    void addEdge(vector<vector<int>>& list, int u, int v){\n        list[u].push_back(v);\n        \n    }\n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n        unordered_map<int, int> map;\n        queue<int> q;\n        bool dec = false;\n        int size = prerequisites.size();\n        vector<vector<int>> list(numCourses);\n        for(int i=0;i<prerequisites.size();i++){\n            addEdge(list, prerequisites[i][1], prerequisites[i][0]);\n        }\n        createIndegree(list, map, size);\n        for(const auto& pair : map){\n            if(pair.second == 0){\n                q.push(pair.first);\n                dec = true;\n            }\n        }\n        if (dec == false) return false;\n      \n        \n\n        while(!q.empty()){\n            int front = q.front();\n            q.pop();\n            for(int i=0;i<list[front].size();i++){\n                map[list[front][i]] = map[list[front][i]] - 1;\n                if(map[list[front][i]] == 0){\n                    q.push(list[front][i]);\n                }\n            }\n\n        }\n        for(const auto& pair : map){\n            cout<<pair.first<<\"->\"<<pair.second<<endl;\n        }\n\n        return all_of(map.begin(), map.end(), [](const auto& pair) {return pair.second == 0; });\n\n    }\n};","compare_result":"0100110100000010111111111000000000000000000000000000","title_slug":"course-schedule","has_notes":false,"flag_type":1}