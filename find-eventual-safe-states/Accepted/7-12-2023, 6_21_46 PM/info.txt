{"id":992665361,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1689166306,"status":10,"status_display":"Accepted","runtime":"162 ms","url":"/submissions/detail/992665361/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"47.1 MB","code":"class Solution {\npublic:\n    void solve(vector<int> &visited, vector<vector<int>>& graph, int i){\n        visited[i] = 2;\n        for(auto it : graph[i]){\n            if(!visited[it]){\n                solve(visited, graph, it);\n            }\n            if(visited[it] == 2) return;\n        }\n        visited[i] = 1;\n    }\n    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {\n        vector<int> visited(graph.size(), 0);\n        vector<int> v;\n        for(int i=0;i<graph.size();i++){\n            if(!visited[i]){\n                solve(visited, graph, i);\n            }\n        }\n\n        for(int i=0;i<visited.size();i++){\n            if(visited[i] == 1) v.push_back(i);\n        }\n        return v;\n\n\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states","has_notes":false,"flag_type":1}