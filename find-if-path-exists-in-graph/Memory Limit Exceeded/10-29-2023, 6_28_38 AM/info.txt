{"id":1086428207,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1698541118,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1086428207/","is_pending":"Not Pending","title":"Find if Path Exists in Graph","memory":"N/A","code":"class Solution {\npublic:\n    bool DFS(int source, int destination, vector<vector<int>>v, vector<int> visited){\n\n        stack<int> s;\n        s.push(source);\n        while(!s.empty()){\n            int top = s.top();\n            s.pop();\n            for(int i=0;i<v[top].size();i++){\n                if(v[top][i] != -1 && i == destination){\n                    return true;\n                }\n                if(v[top][i] != -1 && !visited[i]){\n                    s.push(i);\n                }\n            }\n            visited[top] = 1;\n        }\n\n        return false;\n    }\n\n   \n    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {\n        if(n == 1){\n            return true;\n        }\n        vector<int> visited(n, 0);\n\n        vector<vector<int>> v(n, vector<int>(n, -1));\n\n        for(auto edge : edges){\n            v[edge[0]][edge[1]] = 1;\n            v[edge[1]][edge[0]] = 1;\n        }\n\n        return DFS(source, destination, v, visited);\n      \n    }\n};","compare_result":"111111111111111111111100000000","title_slug":"find-if-path-exists-in-graph","has_notes":false,"flag_type":1}