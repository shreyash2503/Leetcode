{"id":944380481,"lang":"cpp","lang_name":"C++","time":"8Â months","timestamp":1683208625,"status":10,"status_display":"Accepted","runtime":"1115 ms","url":"/submissions/detail/944380481/","is_pending":"Not Pending","title":"Delete the Middle Node of a Linked List","memory":"294.9 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteMiddle(ListNode* head) {\n        if(head == NULL){\n            return NULL;\n        }\n        if(head->next == NULL){\n            return NULL;\n        }\n        ListNode* fast = head->next;\n        ListNode* slow = head;\n        ListNode* prev = NULL;\n        while(fast && fast->next){\n            prev = slow;\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n        if(fast == NULL){\n            ListNode* temp = prev->next->next;\n            prev->next->next = NULL;\n            prev->next = temp;\n            return head;\n        }\n        if(fast->next == NULL){\n            ListNode* temp = slow->next->next;\n            slow->next->next = NULL;\n            slow->next = temp;\n            return head;\n        }\n        return head;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-the-middle-node-of-a-linked-list","has_notes":false,"flag_type":1}