{"id":1010285422,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1690982814,"status":10,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/1010285422/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"28.5 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* createTree(vector<int>& v, int s, int e){\n        if(s > e){\n            return NULL;\n        }\n        int mid = (s + e) / 2;\n        TreeNode* temp = new TreeNode(v[mid]);\n        temp->left = createTree(v, s, mid - 1);\n        temp->right = createTree(v,mid + 1, e);\n        return temp;\n\n    }\n    TreeNode* sortedListToBST(ListNode* head) {\n        vector<int> v;\n        ListNode* temp = head;\n        while(temp != NULL){\n            v.push_back(temp->val);\n            temp = temp->next;\n        }\n        int n = v.size() - 1;\n        return createTree(v, 0, n);\n        \n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false,"flag_type":1}