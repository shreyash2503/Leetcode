{"id":943911110,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1683132674,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/943911110/","is_pending":"Not Pending","title":"Largest Number","memory":"42.9 MB","code":"class Solution {\n    public String largestNumber(int[] nums) {\n        Integer[] nums1 = new Integer[nums.length];\n        for(int i=0;i<nums.length;i++){\n            nums1[i] = nums[i];\n        }\n        Arrays.sort(nums1, (a, b) -> {\n            String str1 = String.valueOf(a) + String.valueOf(b);\n            String str2 = String.valueOf(b) + String.valueOf(a);\n            return str2.compareTo(str1);\n        });\n        if(nums1[0] == 0){\n            return \"0\";\n        }\n       String ans = \"\";\n       for(int i=0;i<nums.length;i++){\n           ans += String.valueOf(nums1[i]);\n       }\n       return ans;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number","has_notes":false,"flag_type":1}