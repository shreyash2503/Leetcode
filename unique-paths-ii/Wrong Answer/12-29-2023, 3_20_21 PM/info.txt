{"id":1131281542,"lang":"cpp","lang_name":"C++","time":"1 day, 18 hours","timestamp":1703843421,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1131281542/","is_pending":"Not Pending","title":"Unique Paths II","memory":"N/A","code":"class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        size_t m = obstacleGrid.size();\n        size_t n = obstacleGrid[0].size();\n        if(m == 1 && n == 1 && obstacleGrid[m - 1][n - 1] == 0){\n            return 1;\n        }\n        if(m == 1 && n == 1 && obstacleGrid[m - 1][n - 1] == 1){\n            return 0;\n        }\n\n        vector<vector<int>> dp(m, vector<int>(n, 0));\n\n        for(size_t i{};i<m;i++){\n            for(size_t j{};j<n;j++){\n                if(i == 0 && j == 0){\n                    dp[i][j] = 1;\n                    continue;\n                }\n                if(i == 0 && j > 0){\n                    if(obstacleGrid[i][j] != 1){\n                        dp[i][j] = 1;\n                    }\n                } else if(i > 0 && j >= 1 && obstacleGrid[i][j] != 1){\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n                } else {\n                    if(obstacleGrid[i][j] != 1){\n                        dp[i][j] = dp[i - 1][j];\n                    }\n                }\n\n            }\n        }\n        return dp[m - 1][n - 1];\n        \n    }\n};","compare_result":"11111110111011110111011111000000000000000","title_slug":"unique-paths-ii","has_notes":false,"flag_type":1}