{"id":1131283755,"lang":"cpp","lang_name":"C++","time":"1 day, 18 hours","timestamp":1703843651,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1131283755/","is_pending":"Not Pending","title":"Unique Paths II","memory":"8 MB","code":"class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n\n        vector<vector<int>> dp(m, vector<int>(n, 0));\n\n        dp[0][0] = (obstacleGrid[0][0] == 0) ? 1 : 0;\n\n        for (int i = 1; i < m; ++i) {\n            dp[i][0] = (obstacleGrid[i][0] == 0 && dp[i - 1][0] == 1) ? 1 : 0;\n        }\n        for (int j = 1; j < n; ++j) {\n            dp[0][j] = (obstacleGrid[0][j] == 0 && dp[0][j - 1] == 1) ? 1 : 0;\n        }\n\n        for (int i = 1; i < m; ++i) {\n            for (int j = 1; j < n; ++j) {\n                if (obstacleGrid[i][j] == 0) {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n                } else {\n                    dp[i][j] = 0;  \n                }\n            }\n        }\n\n        return dp[m - 1][n - 1];\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"unique-paths-ii","has_notes":false,"flag_type":1}