{"id":1099913560,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1700118362,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1099913560/","is_pending":"Not Pending","title":"Sum of Distances in Tree","memory":"N/A","code":"class Solution {\npublic:\n    int helper(unordered_map<int, vector<int>> map, int n, int sv){\n        vector<int> weights(n, INT_MAX);\n        vector<int> visited(n, 0);\n        weights[sv] = 0;\n\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n\n        pq.push({sv, 0});\n\n        while(!pq.empty()){\n            auto front = pq.top(); pq.pop();\n            int node = front.first;\n            int weight = front.second;\n\n            if(visited[node] == 0){\n                for(auto neighbour : map[node]){\n                    int currCost = weight + 1;\n                    if(currCost < weights[neighbour]){\n                        weights[neighbour] = currCost;\n                        pq.push({neighbour, currCost});\n                    }\n                }\n\n                visited[node] = 1;\n\n            }\n        }\n        int sum = 0;\n        for(auto i : weights){\n            sum += i;\n        }\n\n\n        return sum;\n\n    }\n    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {\n        unordered_map<int, vector<int>> map;\n\n        for(auto edge : edges){\n            map[edge[0]].push_back(edge[1]);\n            map[edge[1]].push_back(edge[0]);\n        }\n\n        vector<int> ans;\n        for(int i=0;i<n;i++){\n            ans.push_back(helper(map, n, i));\n        }\n\n        return ans;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111110000000000","title_slug":"sum-of-distances-in-tree","has_notes":false,"flag_type":1}