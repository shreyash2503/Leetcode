{"id":1040848795,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1693883401,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1040848795/","is_pending":"Not Pending","title":"Copy List with Random Pointer","memory":"11.3 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n    \n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        if (!head) return nullptr;\n\n        unordered_map<Node*, Node*> map;\n        Node* newHead = new Node(head->val);\n        map[head] = newHead;\n        Node* temp = head;\n        Node* newTemp = newHead;\n\n        while (temp) {\n            if (temp->next) {\n                if (!map.count(temp->next))\n                    map[temp->next] = new Node(temp->next->val);\n                newTemp->next = map[temp->next];\n            }\n\n            if (temp->random) {\n                if (!map.count(temp->random))\n                    map[temp->random] = new Node(temp->random->val);\n                newTemp->random = map[temp->random];\n            }\n\n            temp = temp->next;\n            newTemp = newTemp->next;\n        }\n\n        return newHead;\n    }\n};\n","compare_result":"1111111111111111111","title_slug":"copy-list-with-random-pointer","has_notes":false,"flag_type":1}