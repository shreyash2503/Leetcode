{"id":996729318,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1689602444,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/996729318/","is_pending":"Not Pending","title":"Add Two Numbers II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        if(l1->next == NULL && l2->next == NULL){\n            int add = l1->val + l2->val;\n            int tens = add / 10;\n            int units = add % 10;\n            ListNode* head = new ListNode(tens);\n            head->next = new ListNode(units);\n            return head;\n        }\n       ListNode* prev = NULL;\n       ListNode* curr = l1;\n       int carry = 0;\n       while(curr != NULL){\n           ListNode* next = curr->next;\n           curr->next = prev;\n           prev = curr;\n\n           curr = next;\n       }\n       ListNode* head1 = prev;\n        curr = l2;\n        prev = NULL;\n        while(curr != NULL){\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n\n            curr = next;\n        }\n        ListNode* head2 = prev;\n        ListNode* head = NULL;\n        ListNode* tail = NULL;\n        int value = 0;\n        while(head1 != NULL || head2 != NULL){\n            int digit1 = (head1 != NULL) ? head1->val : 0;\n            int digit2 = (head2 != NULL) ? head2->val : 0;\n            int add = digit1 + digit2 + carry;\n            if(add / 10 > 0){\n           \n                int tens = add / 10;\n                int units = add % 10;\n                carry = tens;\n                ListNode* temp = new ListNode(units);\n                if(head == NULL){\n                    head = temp;\n                    tail = temp;\n                } else {\n                    tail->next = temp;\n                    tail = temp;\n                }\n                \n            } else {\n                carry = 0;\n                ListNode* temp = new ListNode(add);\n                if(head == NULL){\n                    head = temp;\n                    tail = temp;\n                } else {\n                    tail->next = temp;\n                    tail = temp;\n                }\n\n            }\n            head1 = (head1 != NULL) ? head1->next : NULL;\n            head2 = (head2 != NULL) ? head2->next : NULL;\n        }\n      \n\n        prev = NULL;\n        curr = head;\n        while(curr != NULL){\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n\n            curr = next;\n\n        }\n\n        return prev;\n\n        \n    }\n};","compare_resulttitle_slug":"add-two-numbers-ii","has_notes":false,"flag_type":1}