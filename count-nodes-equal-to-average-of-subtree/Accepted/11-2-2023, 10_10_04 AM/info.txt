{"id":1089627175,"lang":"cpp","lang_name":"C++","time":"1 month, 4 weeks","timestamp":1698900004,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1089627175/","is_pending":"Not Pending","title":"Count Nodes Equal to Average of Subtree","memory":"12.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    pair<int, int> getHeightAndSum(TreeNode* root){\n        if(root == NULL){\n            return {0, 0};\n        }\n        pair<int, int> l = getHeightAndSum(root->left);\n        pair<int, int> r = getHeightAndSum(root->right);\n\n\n        return {l.first + r.first + 1, l.second + r.second + root->val};\n        \n    }\n\n    int helper(TreeNode* root){\n        if(root == NULL){\n            return 0;\n        }\n        pair<int, int> ans = getHeightAndSum(root);\n        if(ans.second / ans.first == root->val){\n            return helper(root->left) + helper(root->right) + 1;\n        }\n\n        return helper(root->left) + helper(root->right);\n    }\n    int averageOfSubtree(TreeNode* root) {\n        return helper(root);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-nodes-equal-to-average-of-subtree","has_notes":false,"flag_type":1}