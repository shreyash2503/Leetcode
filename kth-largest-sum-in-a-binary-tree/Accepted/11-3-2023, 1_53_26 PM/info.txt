{"id":1090470176,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1698999806,"status":10,"status_display":"Accepted","runtime":"160 ms","url":"/submissions/detail/1090470176/","is_pending":"Not Pending","title":"Kth Largest Sum in a Binary Tree","memory":"98.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    long long kthLargestLevelSum(TreeNode* root, int k) {\n        vector<long long> v;\n\n        queue<TreeNode*> q;\n\n        TreeNode* temp = root;\n\n        q.push(temp);\n\n        while(!q.empty()){\n            long long sum = 0;\n            int size = q.size();\n            for(int i=0;i<size;i++){\n                auto front = q.front(); q.pop();\n                sum += front->val;\n                if(front->left){\n                    q.push(front->left);\n                }\n                if(front->right){\n                    q.push(front->right);\n                }\n            }\n\n            v.push_back(sum);\n        }\n\n        sort(v.rbegin(), v.rend());\n        if(v.size()  < k){\n            return -1;\n        }\n        return v[k - 1];\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111","title_slug":"kth-largest-sum-in-a-binary-tree","has_notes":false,"flag_type":1}