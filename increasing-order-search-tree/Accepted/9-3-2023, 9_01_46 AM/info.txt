{"id":1039056160,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1693711906,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1039056160/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void helper(TreeNode* root, vector<int>& v){\n        if(root == nullptr){\n            return;\n        }\n        helper(root->left, v);\n        v.push_back(root->val);\n        helper(root->right, v);\n    }\n    TreeNode* increasingBST(TreeNode* root) {\n        vector<int> v;\n        helper(root, v);\n        TreeNode* r = new TreeNode(v[0]);\n        TreeNode* temp = r;\n        for(int i=1;i<v.size();i++){\n            temp->right = new TreeNode(v[i]);\n            temp = temp->right;\n        }\n        return r;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111","title_slug":"increasing-order-search-tree","has_notes":false,"flag_type":1}