{"id":1039045079,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1693711310,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1039045079/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"28.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (p == nullptr && q == nullptr) {\n            return true;\n        }\n        if (p == nullptr || q == nullptr) {\n            return false;\n        }\n        return (p->val == q->val) &&\n               isSameTree(p->left, q->left) &&\n               isSameTree(p->right, q->right);\n    }\n\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        if (root == nullptr) {\n            return false;\n        }\n        if (isSameTree(root, subRoot)) {\n            return true;\n        }\n        return isSubtree(root->left, subRoot) || isSubtree(root->right, subRoot);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false,"flag_type":1}