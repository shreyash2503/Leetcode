{"id":1041741661,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1693968126,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1041741661/","is_pending":"Not Pending","title":"Split Linked List in Parts","memory":"8.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<ListNode*> splitListToParts(ListNode* head, int k) {\n        int size = 0;\n        ListNode* temp = head;\n        while(temp != NULL){\n            size++;\n            temp = temp->next;\n        }\n\n        int rem = size % k;\n        int width = size / k;\n        vector<ListNode*> v;\n        ListNode* curr = head;\n        for(int i=0;i<k;i++){\n            ListNode* temp = curr;\n            int length = (i < rem ? 1 : 0) + width - 1;\n            for(int j=0;j<length;j++){\n                if(curr != NULL){\n                    curr = curr->next;\n                }\n            }\n            if(temp != NULL){\n                ListNode* prev = curr;\n                curr = curr->next;\n                prev->next = NULL;\n\n            }\n            v.push_back(temp);\n\n\n        }\n       \n\n        return v;\n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"split-linked-list-in-parts","has_notes":false,"flag_type":1}