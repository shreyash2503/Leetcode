{"id":1130784594,"lang":"cpp","lang_name":"C++","time":"2 days, 9 hours","timestamp":1703788417,"status":10,"status_display":"Accepted","runtime":"334 ms","url":"/submissions/detail/1130784594/","is_pending":"Not Pending","title":"String Compression II","memory":"16.1 MB","code":"\nclass Solution {\npublic:\n    int getLengthOfOptimalCompression(string s, int k) {\n        int n = s.length();\n        vector<vector<int>> dp(110, vector<int>(110, 9999)); // Initializing a 2D vector 'dp' of size 110x110 with value 9999\n        dp[0][0] = 0; // Initializing the base case where no characters and deletions exist\n\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= k; j++) {\n                int cnt = 0, del = 0;\n                for (int l = i; l >= 1; l--) {\n                    // Count the frequency of characters from 'i' to 'l'\n                    if (s[l - 1] == s[i - 1]) \n                        cnt++;\n                    else \n                        del++;\n                    \n                    // Check if the remaining allowed deletions are valid (j - del >= 0)\n                    if (j - del >= 0) {\n                        // Update the dp array based on the conditions\n                        dp[i][j] = min(dp[i][j],\n                            dp[l - 1][j - del] + 1 + (cnt >= 100 ? 3 : cnt >= 10 ? 2 : cnt >= 2 ? 1 : 0));\n                    }\n                }\n                \n                // If there are remaining allowed deletions (j > 0), consider the case without deleting current character\n                if (j > 0)\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j - 1]);\n            }\n        }\n        return dp[n][k]; // Return the minimum length for 's' with at most 'k' deletions\n    }\n};\n\n\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression-ii","has_notes":false,"flag_type":1}