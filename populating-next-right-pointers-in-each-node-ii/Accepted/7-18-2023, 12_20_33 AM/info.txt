{"id":996963175,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1689619833,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/996963175/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"17.8 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        queue<Node*> q;\n        queue<Node*> q2;\n        q.push(root);\n        while(!q.empty()){\n            int size = q.size();\n            while(!q2.empty()){\n                if(q2.size() > 1){\n                    Node* temp = q2.front();\n                    q2.pop();\n                    temp->next = q2.front();\n                } else {\n                    Node* temp = q2.front();\n                    q2.pop();\n                    temp->next = NULL;\n                }\n            }\n            for(int i=0;i<size;i++){\n                Node* temp = q.front();\n                q.pop();\n                if(temp && temp->left){\n                    q.push(temp->left);\n                    q2.push(temp->left);\n\n                }\n                if(temp && temp->right){\n                    q.push(temp->right);\n                    q2.push(temp->right);\n                }\n            }\n\n        }\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node-ii","has_notes":false,"flag_type":1}