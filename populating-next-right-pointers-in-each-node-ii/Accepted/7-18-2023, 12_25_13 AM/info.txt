{"id":996966623,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1689620113,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/996966623/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"17.4 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        queue<Node*> q;\n        //create a prev for each iteration \n        //prev of next will be set to current each time\n       \n        if(!root){\n            return root;\n        }\n        q.push(root);\n        while(!q.empty()){\n            int count = q.size();\n            Node *prev = nullptr;\n            while(count--){\n                //get the current node\n                Node *current = q.front();\n                q.pop();\n\n                //insert its left and right if required\n                if(current -> left){\n                    q.push(current -> left);\n                }\n                if(current -> right){\n                    q.push(current -> right);\n                }\n                if(!prev){\n                    prev = current;\n                } else {\n                    prev -> next = current;\n                    prev = current;\n                }\n            }\n        }\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node-ii","has_notes":false,"flag_type":1}